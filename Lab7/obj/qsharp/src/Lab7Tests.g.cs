//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"GenerateRandomRotation\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"GenerateRandomRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"ApplyRotation\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"rotation\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":53}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Lab7.ApplyRotation\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlled specialization for Lab7.ApplyRotation\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":21,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Lab7.ApplyRotation\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise1Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":28,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":29,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise1Test\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":29,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise2Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":79,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":80,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise2Test\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":80,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise3Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":124,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":125,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise3Test\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":125,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise4Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":178,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":179,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise4Test\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":179,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"BoolArrayAsString\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":214,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"boolArray\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":30},\"Item2\":{\"Line\":1,\"Column\":39}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Bool\"}]},\"ReturnType\":{\"Case\":\"String\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"BoolArrayAsString\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":214,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise5Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":225,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":226,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab7\",\"Name\":\"Exercise5Test\"},\"Attributes\":[],\"SourceFile\":\"/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs\",\"Position\":{\"Item1\":226,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
#line hidden
namespace Lab7
{
    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 15, 22)]
    public partial class GenerateRandomRotation : Operation<QVoid, IQArray<Double>>, ICallable
    {
        public GenerateRandomRotation(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "GenerateRandomRotation";
        String ICallable.FullName => "Lab7.GenerateRandomRotation";
        protected ICallable<(Double,Double), Double> Microsoft__Quantum__Random__DrawRandomDouble
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        public override Func<QVoid, IQArray<Double>> __Body__ => (__in__) =>
        {
#line 16 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            return new QArray<Double>(Microsoft__Quantum__Random__DrawRandomDouble.Apply((0D, Microsoft__Quantum__Math__PI.Apply(QVoid.Instance))), Microsoft__Quantum__Random__DrawRandomDouble.Apply((0D, (2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)))));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomDouble = this.__Factory__.Get<ICallable<(Double,Double), Double>>(typeof(global::Microsoft.Quantum.Random.DrawRandomDouble));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(IQArray<Double> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Double>> Run(IOperationFactory __m__)
        {
            return __m__.Run<GenerateRandomRotation, QVoid, IQArray<Double>>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 22, 30)]
    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Adjoint, 22, 30)]
    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Controlled, 22, 30)]
    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.ControlledAdjoint, 22, 30)]
    public partial class ApplyRotation : Unitary<(IQArray<Double>,Qubit)>, ICallable
    {
        public ApplyRotation(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Double>,Qubit)>, IApplyData
        {
            public In((IQArray<Double>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "ApplyRotation";
        String ICallable.FullName => "Lab7.ApplyRotation";
        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Rx
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Rz
        {
            get;
            set;
        }

        public override Func<(IQArray<Double>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (rotation,target) = __in__;
#line 24 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Apply((rotation[0L], target));
#line 25 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Apply((rotation[1L], target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Double>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (rotation,target) = __in__;
#line 22 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Adjoint.Apply((rotation[1L], target));
#line 22 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Adjoint.Apply((rotation[0L], target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Double>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(rotation,target)) = __in__;
#line 22 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Controlled.Apply((__controlQubits__, (rotation[0L], target)));
#line 22 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Controlled.Apply((__controlQubits__, (rotation[1L], target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Double>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(rotation,target)) = __in__;
#line 22 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Adjoint.Controlled.Apply((__controlQubits__, (rotation[1L], target)));
#line 22 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Adjoint.Controlled.Apply((__controlQubits__, (rotation[0L], target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__Rx = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Rx));
            this.Microsoft__Quantum__Intrinsic__Rz = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Rz));
        }

        public override IApplyData __DataIn__((IQArray<Double>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Double> rotation, Qubit target)
        {
            return __m__.Run<ApplyRotation, (IQArray<Double>,Qubit), QVoid>((rotation, target));
        }
    }

    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 30, 81)]
    public partial class Exercise1Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise1Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise1Test")]
            public void Exercise1Test()
#line 30 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise1Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 30 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise1Test";
        String ICallable.FullName => "Lab7.Exercise1Test";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<Double, Boolean> Microsoft__Quantum__Random__DrawRandomBool
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IAdjointable<(IQArray<Boolean>,IQArray<Qubit>)> Exercise1_XOR__
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactB
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> Microsoft__Quantum__Convert__ResultAsBool
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 31 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            var testCases = (IQArray<IQArray<Boolean>>)new QArray<IQArray<Boolean>>(new QArray<Boolean>(false, true, true), new QArray<Boolean>(true, false, true, true), new QArray<Boolean>(true, true, false, true, false), new QArray<Boolean>(false, false, true, true, false, true), new QArray<Boolean>(true, true, true, true, false, true, true), new QArray<Boolean>(true, true, true, true, true, true, true, true), new QArray<Boolean>(true, false, false, true, true, false, false, true, true), new QArray<Boolean>(true, false, true, true, false, true, false, true, true, false));
#line 42 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            foreach (var testCase in testCases)
#line hidden
            {
#line 43 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                var length = testCase.Length;
#line hidden
                {
#line 44 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var qubits = Allocate__.Apply(length);
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 46 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        var randomState = new QArray<Boolean>();
#line 47 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        foreach (var i in new QRange(0L, (length - 1L)))
#line hidden
                        {
#line 48 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            randomState = QArray<Boolean>.Add(randomState, new QArray<Boolean>(Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D)));
#line 49 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            if (randomState[i])
                            {
#line 50 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(qubits[i]);
                            }
                        }

#line 54 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        Exercise1_XOR__.Apply((testCase, qubits));
#line 56 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        foreach (var i in new QRange(0L, (length - 1L)))
#line hidden
                        {
#line 57 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Diagnostics__EqualityFactB.Apply((Microsoft__Quantum__Convert__ResultAsBool.Apply(Microsoft__Quantum__Intrinsic__M.Apply(qubits[i])), (testCase[i] != randomState[i]), String.Format("Incorrect result for {0} XOR {1}", testCase[i], randomState[i])));
                        }

#line 64 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        ResetAll__.Apply(qubits);
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(qubits);
                        }
                    }
                }
            }

#line hidden
            {
#line 68 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                var qubit = Allocate__.Apply();
#line hidden
                bool __arg2__ = true;
                try
                {
#line 69 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 70 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    ApplyRotation__.Apply((rotation, qubit));
#line 72 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Exercise1_XOR__.Apply((new QArray<Boolean>(true), new QArray<Qubit>(qubit)));
#line 74 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubit);
#line 75 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    ApplyRotation__.Adjoint.Apply((rotation, qubit));
#line 77 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(new QArray<Qubit>(qubit));
                }
#line hidden
                catch
                {
                    __arg2__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg2__)
                    {
#line hidden
                        Release__.Apply(qubit);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Random__DrawRandomBool = this.__Factory__.Get<ICallable<Double, Boolean>>(typeof(global::Microsoft.Quantum.Random.DrawRandomBool));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Exercise1_XOR__ = this.__Factory__.Get<IAdjointable<(IQArray<Boolean>,IQArray<Qubit>)>>(typeof(Exercise1_XOR));
            this.Microsoft__Quantum__Diagnostics__EqualityFactB = this.__Factory__.Get<ICallable<(Boolean,Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactB));
            this.Microsoft__Quantum__Convert__ResultAsBool = this.__Factory__.Get<ICallable<Result, Boolean>>(typeof(global::Microsoft.Quantum.Convert.ResultAsBool));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise1Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 81, 126)]
    public partial class Exercise2Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise2Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise2Test")]
            public void Exercise2Test()
#line 81 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise2Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 81 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise2Test";
        String ICallable.FullName => "Lab7.Exercise2Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Qubit), QVoid> Exercise2_CheckIfAllZeros__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactB
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 82 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            foreach (var i in new QRange(0L, 50L))
#line hidden
            {
#line 83 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                foreach (var numQubits in new QRange(3L, 8L))
#line hidden
                {
#line hidden
                    {
#line 84 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        var (qubits,target) = (Allocate__.Apply(numQubits), Allocate__.Apply());
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 85 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, QArray<Qubit>.Add(qubits, new QArray<Qubit>(target))));
#line 87 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Exercise2_CheckIfAllZeros__.Apply((qubits, target));
#line 89 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 91 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            var isAllZero = true;
#line 92 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            foreach (var qubit in qubits)
#line hidden
                            {
#line 93 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                                if ((Microsoft__Quantum__Intrinsic__M.Apply(qubit) == Result.One))
                                {
#line 94 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                                    isAllZero = false;
                                }
                            }

#line 98 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Diagnostics__EqualityFactB.Apply(((Microsoft__Quantum__Intrinsic__M.Apply(target) == Result.One), isAllZero, "AllZeros test failed"));
#line 104 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            ResetAll__.Apply(QArray<Qubit>.Add(qubits, new QArray<Qubit>(target)));
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(qubits);
#line hidden
                                Release__.Apply(target);
                            }
                        }
                    }
                }
            }

#line hidden
            {
#line 109 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                var (qubit,target) = (Allocate__.Apply(), Allocate__.Apply());
#line hidden
                bool __arg2__ = true;
                try
                {
#line 110 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 111 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    ApplyRotation__.Apply((rotation, qubit));
#line 112 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 114 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Exercise2_CheckIfAllZeros__.Apply((new QArray<Qubit>(qubit), target));
#line 116 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubit);
#line 117 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((new QArray<Qubit>(qubit), target));
#line 118 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubit);
#line 119 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    ApplyRotation__.Adjoint.Apply((rotation, qubit));
#line 120 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 122 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(new QArray<Qubit>(qubit), new QArray<Qubit>(target)));
                }
#line hidden
                catch
                {
                    __arg2__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg2__)
                    {
#line hidden
                        Release__.Apply(qubit);
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Exercise2_CheckIfAllZeros__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise2_CheckIfAllZeros));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Diagnostics__EqualityFactB = this.__Factory__.Get<ICallable<(Boolean,Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactB));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise2Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 126, 180)]
    public partial class Exercise3Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise3Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise3Test")]
            public void Exercise3Test()
#line 126 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise3Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 126 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise3Test";
        String ICallable.FullName => "Lab7.Exercise3Test";
        protected ICallable<Double, Boolean> Microsoft__Quantum__Random__DrawRandomBool
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid> Exercise3_CheckKey__
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactB
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 127 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            foreach (var i in new QRange(1L, 50L))
#line hidden
            {
#line 128 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                foreach (var numQubits in new QRange(3L, 8L))
#line hidden
                {
#line 129 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var original = new QArray<Boolean>();
#line 130 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var key = new QArray<Boolean>();
#line 131 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var encrypted = new QArray<Boolean>();
#line 132 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    foreach (var j in new QRange(0L, (numQubits - 1L)))
#line hidden
                    {
#line 133 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        original = QArray<Boolean>.Add(original, new QArray<Boolean>(Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D)));
#line 134 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        key = QArray<Boolean>.Add(key, new QArray<Boolean>(Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D)));
#line 135 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        encrypted = QArray<Boolean>.Add(encrypted, new QArray<Boolean>((original[j] != key[j])));
                    }

#line hidden
                    {
#line 138 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        var (qubits,target) = (Allocate__.Apply(numQubits), Allocate__.Apply());
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 139 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, QArray<Qubit>.Add(qubits, new QArray<Qubit>(target))));
#line 141 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Exercise3_CheckKey__.Apply((original?.Copy(), encrypted?.Copy(), qubits, target));
#line 143 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 145 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            var foundCorrectKey = true;
#line 146 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            foreach (var j in new QRange(0L, (numQubits - 1L)))
#line hidden
                            {
#line 147 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                                if (((Microsoft__Quantum__Intrinsic__M.Apply(qubits[j]) == Result.One) != key[j]))
                                {
#line 148 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                                    foundCorrectKey = false;
                                }
                            }

#line 152 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Diagnostics__EqualityFactB.Apply(((Microsoft__Quantum__Intrinsic__M.Apply(target) == Result.One), foundCorrectKey, "CheckKey test failed"));
#line 158 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            ResetAll__.Apply(qubits);
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(qubits);
#line hidden
                                Release__.Apply(target);
                            }
                        }
                    }
                }
            }

#line hidden
            {
#line 163 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                var (qubit,target) = (Allocate__.Apply(), Allocate__.Apply());
#line hidden
                bool __arg2__ = true;
                try
                {
#line 164 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 165 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    ApplyRotation__.Apply((rotation, qubit));
#line 166 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 168 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Exercise3_CheckKey__.Apply((new QArray<Boolean>(true), new QArray<Boolean>(true), new QArray<Qubit>(qubit), target));
#line 170 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubit);
#line 171 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((new QArray<Qubit>(qubit), target));
#line 172 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubit);
#line 173 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    ApplyRotation__.Adjoint.Apply((rotation, qubit));
#line 174 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 176 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(new QArray<Qubit>(qubit), new QArray<Qubit>(target)));
                }
#line hidden
                catch
                {
                    __arg2__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg2__)
                    {
#line hidden
                        Release__.Apply(qubit);
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomBool = this.__Factory__.Get<ICallable<Double, Boolean>>(typeof(global::Microsoft.Quantum.Random.DrawRandomBool));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Exercise3_CheckKey__ = this.__Factory__.Get<ICallable<(IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise3_CheckKey));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Microsoft__Quantum__Diagnostics__EqualityFactB = this.__Factory__.Get<ICallable<(Boolean,Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactB));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise3Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 180, 215)]
    public partial class Exercise4Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise4Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise4Test")]
            public void Exercise4Test()
#line 180 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise4Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 180 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise4Test";
        String ICallable.FullName => "Lab7.Exercise4Test";
        protected ICallable<Double, Boolean> Microsoft__Quantum__Random__DrawRandomBool
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<(ICallable,IQArray<Qubit>,Qubit), QVoid> Exercise4_GroverIteration__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid> Exercise3_CheckKey__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Qubit), QVoid> Exercise2_CheckIfAllZeros__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 181 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            foreach (var i in new QRange(1L, 25L))
#line hidden
            {
#line 182 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                foreach (var numQubits in new QRange(3L, 8L))
#line hidden
                {
#line 183 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var original = new QArray<Boolean>();
#line 184 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var key = new QArray<Boolean>();
#line 185 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var encrypted = new QArray<Boolean>();
#line 186 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    foreach (var j in new QRange(0L, (numQubits - 1L)))
#line hidden
                    {
#line 187 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        original = QArray<Boolean>.Add(original, new QArray<Boolean>(Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D)));
#line 188 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        key = QArray<Boolean>.Add(key, new QArray<Boolean>(Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D)));
#line 189 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        encrypted = QArray<Boolean>.Add(encrypted, new QArray<Boolean>((original[j] != key[j])));
                    }

#line hidden
                    {
#line 192 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        var (qubits,target) = (Allocate__.Apply(numQubits), Allocate__.Apply());
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 193 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 194 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 196 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Exercise4_GroverIteration__.Apply((Exercise3_CheckKey__.Partial(new Func<(IQArray<Qubit>,Qubit), (IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit)>((__arg2__) => (original?.Copy(), encrypted?.Copy(), __arg2__.Item1, __arg2__.Item2))), qubits, target));
#line 202 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 203 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Exercise2_CheckIfAllZeros__.Apply((qubits, target));
#line 204 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 206 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Exercise3_CheckKey__.Apply((original?.Copy(), encrypted?.Copy(), qubits, target));
#line 207 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 208 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 210 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(qubits, new QArray<Qubit>(target)));
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(qubits);
#line hidden
                                Release__.Apply(target);
                            }
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomBool = this.__Factory__.Get<ICallable<Double, Boolean>>(typeof(global::Microsoft.Quantum.Random.DrawRandomBool));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Exercise4_GroverIteration__ = this.__Factory__.Get<ICallable<(ICallable,IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise4_GroverIteration));
            this.Exercise3_CheckKey__ = this.__Factory__.Get<ICallable<(IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise3_CheckKey));
            this.Exercise2_CheckIfAllZeros__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise2_CheckIfAllZeros));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise4Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 215, 227)]
    public partial class BoolArrayAsString : Operation<IQArray<Boolean>, String>, ICallable
    {
        public BoolArrayAsString(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "BoolArrayAsString";
        String ICallable.FullName => "Lab7.BoolArrayAsString";
        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<IQArray<Boolean>, String> __Body__ => (__in__) =>
        {
            var boolArray = __in__;
#line 216 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            var str = "";
#line 217 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            foreach (var i in new QRange(0L, (boolArray.Length - 1L)))
#line hidden
            {
#line 218 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                str = (str + (boolArray[i] ? "1" : "0"));
#line 219 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                if (((i % 8L) == 7L))
                {
#line 220 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    str = (str + " ");
                }
            }

#line 223 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            return str;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__(IQArray<Boolean> data) => data;
        public override IApplyData __DataOut__(String data) => new QTuple<String>(data);
        public static System.Threading.Tasks.Task<String> Run(IOperationFactory __m__, IQArray<Boolean> boolArray)
        {
            return __m__.Run<BoolArrayAsString, IQArray<Boolean>, String>(boolArray);
        }
    }

    [SourceLocation("/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs", OperationFunctor.Body, 227, -1)]
    public partial class Exercise5Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise5Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise5Test")]
            public void Exercise5Test()
#line 227 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise5Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 227 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise5Test";
        String ICallable.FullName => "Lab7.Exercise5Test";
        protected ICallable<Double, Boolean> Microsoft__Quantum__Random__DrawRandomBool
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Boolean>, String> BoolArrayAsString__
        {
            get;
            set;
        }

        protected ICallable<(ICallable,Int64), IQArray<Boolean>> Exercise5_GroverSearch__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid> Exercise3_CheckKey__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 228 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
            foreach (var numQubits in new QRange(10L, 14L))
#line hidden
            {
#line 229 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                var original = new QArray<Boolean>();
#line 230 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                var key = new QArray<Boolean>();
#line 231 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                var encrypted = new QArray<Boolean>();
#line 232 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                foreach (var j in new QRange(0L, (numQubits - 1L)))
#line hidden
                {
#line 233 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    original = QArray<Boolean>.Add(original, new QArray<Boolean>(Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D)));
#line 234 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    key = QArray<Boolean>.Add(key, new QArray<Boolean>(Microsoft__Quantum__Random__DrawRandomBool.Apply(0.5D)));
#line 235 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    encrypted = QArray<Boolean>.Add(encrypted, new QArray<Boolean>((original[j] != key[j])));
                }

#line 238 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                Message__.Apply(String.Format("Running Grover search on {0} qubits.", numQubits));
#line 239 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                Message__.Apply(String.Format("Original = {0}", BoolArrayAsString__.Apply(original?.Copy())));
#line 240 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                Message__.Apply(String.Format("Encrypted = {0}", BoolArrayAsString__.Apply(encrypted?.Copy())));
#line 242 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                foreach (var i in new QRange(1L, 5L))
#line hidden
                {
#line 243 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var result = (IQArray<Boolean>)Exercise5_GroverSearch__.Apply((Exercise3_CheckKey__.Partial(new Func<(IQArray<Qubit>,Qubit), (IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit)>((__arg1__) => (original?.Copy(), encrypted?.Copy(), __arg1__.Item1, __arg1__.Item2))), numQubits));
#line 248 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    Message__.Apply(String.Format("Search returned {0}", BoolArrayAsString__.Apply(result)));
#line 250 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    var foundCorrectKey = true;
#line 251 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    foreach (var j in new QRange(0L, (numQubits - 1L)))
#line hidden
                    {
#line 252 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        if ((result[j] != key[j]))
                        {
#line 253 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                            foundCorrectKey = false;
                        }
                    }

#line 256 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                    if (foundCorrectKey)
                    {
#line 257 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        Message__.Apply("Got the right key!");
#line 258 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        return QVoid.Instance;
                    }
                    else
                    {
#line 260 "/home/matt/Documents/EE-193-06/Labs/Lab7/Lab7Tests.qs"
                        Message__.Apply("Incorrect key, trying again...");
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomBool = this.__Factory__.Get<ICallable<Double, Boolean>>(typeof(global::Microsoft.Quantum.Random.DrawRandomBool));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.BoolArrayAsString__ = this.__Factory__.Get<ICallable<IQArray<Boolean>, String>>(typeof(BoolArrayAsString));
            this.Exercise5_GroverSearch__ = this.__Factory__.Get<ICallable<(ICallable,Int64), IQArray<Boolean>>>(typeof(Exercise5_GroverSearch));
            this.Exercise3_CheckKey__ = this.__Factory__.Get<ICallable<(IQArray<Boolean>,IQArray<Boolean>,IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise3_CheckKey));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise5Test, QVoid, QVoid>(QVoid.Instance);
        }
    }
}